package org.serratec.livros.controller;

import java.util.List;
import java.util.Optional;

import org.serratec.livros.domain.Livros;
import org.serratec.livros.repository.LivrosRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;

@RestController
@RequestMapping ("/livros")
public class livrosController {
	
	@Autowired
	LivrosRepository livrosRepository;
	
	
	@GetMapping
	public List<Livros> listar () {
		return livrosRepository.findAll();
	}
	
	@GetMapping ("/{id}")
	public ResponseEntity <Livros> buscar (@PathVariable Long id) {
		Optional<Livros> LivrosOpt = livrosRepository.findById(id);
		if (LivrosOpt.isPresent()) {
			return ResponseEntity.ok(LivrosOpt.get());
		}
		return ResponseEntity.notFound().build();
	}
	
	@PostMapping 
	@ResponseStatus(HttpStatus.CREATED)
	public Livros inserir (@Valid @RequestBody Livros livros) {
		livros = livrosRepository.save(livros);
		return livros;
	}
	
	@PutMapping ("/{id}")
	public ResponseEntity<Livros> atualizar (@PathVariable Long id,
			@Valid @RequestBody Livros livros) {
		boolean existsById = livrosRepository.existsById(id);
		if (!existsById) {
			return ResponseEntity.notFound().build();
		}
		livros.setId(id);
		livrosRepository.save(livros);
		return ResponseEntity.ok(livros);
	}
	
	@DeleteMapping ("/{id}")
	public ResponseEntity<Void> deletar (@PathVariable Long id) {
		boolean existsById = livrosRepository.existsById(id);
		if (!existsById) {
			return ResponseEntity.notFound().build();
		}
		livrosRepository.deleteById(id);
		return ResponseEntity.noContent().build();
	}
	

}
